require('sugar');
var fs = require('fs')
  , path = require('path')
  , async = require('async')
  , mkdirp = require('mkdirp')
  , generateDataModel = require('../generators/datamodel')
  , util = require('../util')
  ;

var usage = 'Usage: vz generate datamodel [--debug|-d] [--output|-o FILE] <schemafile>';

/* istanbul ignore next */
module.exports = function(vizData, options) {
  // Normalize options
  var normalizedOptions = {
    output: options.output,
    what: options._[0]
  };

  if (normalizedOptions.what === 'datamodel') {
    normalizedOptions.schemaFile = options._[1];
    generateDatamodel(normalizedOptions);
  } else {
    console.log("Don't know how to generate " + normalizedOptions.what);
    process.exit(1);
  }
};

module.exports.doc = 'Generates source code for datamodel based on data-schema.json' +
                     '\n\t' + usage;

module.exports.argParserOpts = {
  string: ['output'],
  boolean: ['debug'],
  default: {
    output: path.join('src', 'datamodel.vgl')
  },
  alias: {
    output: 'o',
    debug: 'd'
  }
};


/* istanbul ignore next */
function generateDatamodel(options) {
  if (!options.schemaFile) {
    console.error('Missing schema file argument');
    process.exit(1);
  }

  var schema;
  try {
    schema = require(path.join(process.cwd(), options.schemaFile));
  } catch (e) {
    console.error(e);
    process.exit(1);
  }

  var generatedSource;
  async.series(
    [
      function generate(callback) {
        generateDataModel.run(schema, function(err, res) {
          generatedSource = res;
          callback(err, res);
        });
      },

      function stamp(callback) {
        var sentence = ["Autogenerated"];
        sentence.push("from " + options.schemaFile);
        if (process.env.USER) {
          sentence.push("by " + process.env.USER);
        }
        sentence.push("on " + Date());
        generatedSource = "## " + sentence.join(" ") + "\n\n" + generatedSource;

        callback(null, generatedSource);
      },

      mkdirp.bind(null, path.dirname(options.output)),

      function write(callback) {
        fs.writeFile(options.output, generatedSource, callback);
      }
    ],

    function(err) {
      if (err) {
        console.error((options.debug ? err.stack : null) || err.message || err);
        return process.exit(1);
      }
      console.log('Wrote ' + options.output);
    }
  );
}
