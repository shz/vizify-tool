var fs = require('fs')
  , path = require('path')
  , async = require('async')
  , mkdirp = require('mkdirp')
  , generateDataModel = require('../generators/datamodel')
  , util = require('../util')
  ;
require("sugar");

var usage = 'Usage: vz generate datamodel [--debug|-d] [--output|-o DIR]';

/* istanbul ignore next */
module.exports = function(options) {
  // Normalize options
  options = {
    output: options.output,
    what: options._[0]
  };

  if (options.what === "datamodel") {
    generateDatamodel(options);
  } else {
    console.log("Don't know how to generate " + options.what);
    process.exit(1);
  }

};

module.exports.doc = 'Generates source code for datamodel based on data-schema.json' +
                     '\n\t' + usage;

module.exports.argParserOpts = {
  string: ['output'],
  boolean: ['debug'],
  default: {
    output: path.join(process.cwd(), 'src')
  },
  alias: {
    output: 'o',
    debug: 'd'
  }
};


/* istanbul ignore next */
function generateDatamodel(options) {
  var schema;
  try {
    schema = require(path.join(process.cwd(), "data-schema.json"));
  } catch (e) {
    console.error(e);
    process.exit(1);
  }

  var generatedSource;
  async.series(
    [
      function generate(callback) {
        generateDataModel.run(schema, function(err, res) {
          generatedSource = res;
          callback(err, res);
        });
      },

      function stamp(callback) {
        var sentence = ["Autogenerated"];
        sentence.push("from " + "datamodel.vgl");
        if(process.env.USER) {
          sentence.push("by " + process.env.USER);
        }
        sentence.push("on " + Date());
        generatedSource = "## " + sentence.join(" ") + "\n\n" + generatedSource;

        callback(null, generatedSource);
      },

      mkdirp.bind(null, options.output),

      function write(callback) {
        fs.writeFile(path.join(options.output, "datamodel.vgl"), generatedSource, callback);
      }
    ]
    ,
    function(err) {
      if (err) {
        console.error((options.debug ? err.stack : null) || err.message || err);
        return process.exit(1);
      }
      console.log('Wrote datamodel.vgl to', options.output);
    }
  );
}
