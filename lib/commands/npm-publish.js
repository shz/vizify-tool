var fs = require('fs')
  , path = require('path')
  , async = require('async')
  , mkdirp = require('mkdirp')
  , tmp = require('tmp')
  , exec = require('child_process').exec
  , card = require('../card')
  , compile = require('../compile')
  ;

// ysecure is only available on open stack so ignore failure for when we run on a mac.
var ysecure;
try {
  ysecure = require('ysecure');
} catch (e) {}

module.exports = function(options) {
  var srcDir = process.cwd();
  var tmpDir = srcDir;
  var info = null;

  async.waterfall([
    // create temp directory
    function(callback) {
      if (options.t) {
        tmp.dir({unsafeCleanup: !options.d}, function(err, path) {
          if (err) {
            return callback(err);
          }
          tmpDir = path;
          console.log("Working directory: ", tmpDir);
          callback();
        });
      } else {
        callback();
      }
    },

    // Load card info
    function(callback) {
      card.read(srcDir, callback);
    },

    // Compile card
    function(c, callback) {
      info = c;
      compile.compileCard({
        dir: srcDir,
        name: c.name
      }, 'javascript', callback);
    },

    // Write main.js to lib/index.js
    function(files, callback) {
      var d = path.join(tmpDir, 'lib');
      mkdirp(d, function(err) {
        fs.writeFile(path.join(d, 'index.js'), files['main.js'], callback);
      });
    },

    // Write .npmignore
    function(callback) {
      fs.writeFile(path.join(tmpDir, '.npmignore'), 'card.json\nsrc/\n', callback);
    },

    // Write package.json
    function(callback) {
      fs.writeFile(path.join(tmpDir, 'package.json'), JSON.stringify({
        name: "vizify-card-" + info.name,
        version: info.version,
        description: 'Autogenerated browserify module',
        main: 'lib/index.js',
        yahoo: {
          bugzilla: {
            product: "TODO",
            component: "General"
          },
          custodian: {
            email: "cards-dev@yahoo-inc.com",
            url: "https://git.corp.yahoo.com/vizify/tool"
          }
        }}, null, 2), callback);
    },

    // Run npm publish unless dry run option (-n) is passed
    function(callback) {
      if (options.d) {
        console.log("Not publishing. Leaving temp files in: " + tmpDir);
      } else {

        // Add credential params to ynpm command
        var addCredentials = function(command) {
          var credentials = {
            identity: process.env.HOME + '/.ssh/rsa_dist',
            headless_username: ysecure.getKey('screwdriver.build.username'),
            headless_pwd_key: 'screwdriver.build.password'
          };
          Object.keys(credentials).forEach(function (cred) {
            command.push('--' + cred + '=' + credentials[cred]);
          });
          return command;
        };

        var publishCommand = ['ynpm', 'ypublish', '--distgroup=users'];
        var cmd = addCredentials(publishCommand).join(' ');
        console.log("Executing: " + cmd);
        exec(cmd, {cwd: tmpDir}, function(err, stdout, stderr) {
          if (err) {
            console.error(stderr);
            console.error("ynpm exited with code " + err.code);
          } else {
            console.log(stdout);
          }
        });
      }
      callback();
    }
  ], function(err) {
    if (err) {
      console.error(err.message);
      process.exit(1);
    }
  });
};
module.exports.doc = "Publish to ynpm.\n\t-d : Dry run - doesn't run ynpm publish or cleanup temp files.\n\t-t : Run in a temp directory instead of in place";
